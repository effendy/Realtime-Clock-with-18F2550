#include <p18cxxx.h>
#include <delays.h>
#include "18F2550BOLT.h"
#include "LiquidCrystal.h"



void LiquidCrystal(unsigned int rs, unsigned int enable,
		unsigned int d0, unsigned int d1, unsigned int d2, unsigned int d3){
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}


 void init(unsigned int fourbitmode,unsigned int rs,unsigned int rw,unsigned int enable,
	   unsigned int d0,unsigned int d1,unsigned int d2,unsigned int d3,
	   unsigned int d4,unsigned int d5,unsigned int d6,unsigned int d7)
{
  _rs_pin = rs;
  _rw_pin = rw;
  _enable_pin = enable;
  
  _data_pins[0] = d0;
  _data_pins[1] = d1;
  _data_pins[2] = d2;
  _data_pins[3] = d3; 
  _data_pins[4] = d4;
  _data_pins[5] = d5;
  _data_pins[6] = d6;
  _data_pins[7] = d7; 

  if (fourbitmode)
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1, LCD_5x8DOTS);  
}

/********** high level commands, for the user! */
void clear(){
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
  delay_us(2000);  // this command takes a long time!
}
void home()
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delay_us(2000);  // this command takes a long time!
}

// Turn the display on/off (quickly)
void noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

void begin(unsigned int cols,unsigned int rows,unsigned int charsize){
  if (rows > 1) {
    _displayfunction |= LCD_2LINE;
  }
  _numlines = rows;

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  

  // for some 1 line displays you can select a 10 pixel high font
  if ((charsize != LCD_5x8DOTS) && (rows == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }
   //pinMode(_rs_pin, OUTPUT);
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
   // pinMode(_rw_pin, OUTPUT);
  }
  //pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  /*for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
  {
    pinMode(_data_pins[i], OUTPUT);
   }*/ 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delay_us(50000); 
  // Now we pull both RS and R/W low to begin commands
  //digitalWrite(_rs_pin, LOW);
   RC6=0; delay_us(50);  //RS= 0  
  //digitalWrite(_enable_pin, LOW);
   RC7=0; delay_us(50);  //E = 0
  if (_rw_pin != 255) { 
  //  digitalWrite(_rw_pin, LOW);
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
    delay_us(4500); // wait min 4.1ms

    // second try
    write4bits(0x03);
    delay_us(4500); // wait min 4.1ms
    
    // third go!
    write4bits(0x03); 
    delay_us(150);

    // finally, set to 4-bit interface
    write4bits(0x02); 
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
    delay_us(4500);  // wait more than 4.1ms

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
    delay_us(150);

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
  display();

  // clear it off
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);

}


// Turn on and off the blinking cursor
void noBlink() {
  _displaycontrol &= ~LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void blink() {
  _displaycontrol |= LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
// Turns the underline cursor on/off
void noCursor() {
  _displaycontrol &= ~LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void cursor() {
  _displaycontrol |= LCD_CURSORON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
// These commands scroll the display without changing the RAM
void scrollDisplayLeft(void) {
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
}
void scrollDisplayRight(void) {
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// This is for text that flows Left to Right
void leftToRight(void) {
  _displaymode |= LCD_ENTRYLEFT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This is for text that flows Right to Left
void rightToLeft(void) {
  _displaymode &= ~LCD_ENTRYLEFT;
  command(LCD_ENTRYMODESET | _displaymode);
}
// This will 'right justify' text from the cursor
void autoscroll(void) {
  _displaymode |= LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will 'left justify' text from the cursor
void noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

void setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
  _row_offsets[1] = row1;
  _row_offsets[2] = row2;
  _row_offsets[3] = row3;
}
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(unsigned int location, unsigned int charmap[]) {
  int i;  
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  
  for (i=0; i<8; i++) {
    write(charmap[i]);
  }
}

void setCursor(unsigned int col, unsigned int row)
{
  const int max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
    row = _numlines - 1;    // we count rows starting w/0
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
}



/************ low level data pushing commands **********/
// write either command or data, with automatic 4/8-bit selection
void send(unsigned int value, unsigned int mode) {
  //digitalWrite(_rs_pin, mode);
  RC6=mode; delay_us(50);  //RS= mode
  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    //digitalWrite(_rw_pin, LOW);
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}

void pulseEnable(void) {
  //digitalWrite(_enable_pin, LOW);
  RC7=0; delay_us(1);  //E = 0    
  //digitalWrite(_enable_pin, HIGH);
  RC7=1; delay_us(10);  //E = 1       // enable pulse must be >450ns
  //digitalWrite(_enable_pin, LOW);
  RC7=0; delay_us(100);  //E = 0       // commands need > 37us to settle
}
void write4bits(unsigned int value) {
  /*for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }*/
  RA0 = (value) & 0x01; 
  RA1 = (value >> 1) & 0x01; 
  RA2 = (value >> 2) & 0x01; 
  RA3 = (value >> 3) & 0x01; 
  pulseEnable();
}
void write8bits(unsigned int value) {
  /*for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }*/
  
  pulseEnable();
}

void print(char str[]){
	int i = sizeof(str);
	int j=0;
	for (j=0; j<i;j++)
		//PutLCD(str[j]);
		write(str[j]);
}

/*********** mid level commands, for sending data/cmds */
void command(unsigned int value) {
  send(value, 0);
}

int write(unsigned int value) {
  send(value, 1);
  return 1; // assume sucess
}
/*void PutLCD(char c) {
	write(c);
    //PORTB = c; EnableLCD2(); delay_us(50);
}*/






